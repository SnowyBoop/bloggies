Having built well over 25 Ergo / Split keyboards so far, i must say that the resources 
on doing so are often very outdated and sometimes plain overcomplicated.

So with this blog entry i will try my best to summarize a years long journey on designing,
building and configuring software for split or non split boards without the BS :)

I suppose you came here to learn how to build yourself a new keyboard. Depending on
how much you already know, here are some shortcuts to skip parts that might be irrellevant.

You already know / dont care how the electronics work -> Skip to section 2

You already read all the electronic basics, and only want design help -> Skip to section 3

You are only interested in understanding QMK -> Skip to section 6

----
Section 1:
How do the electronics in the boards actually work?

Section 2:
Which parts are needed for a custom keyboard, and where to source them

Section 3:
Designing a ergonomic keyboard, for your own hands made easy

Section 4: 
CAD design for a housing or a pcb made from an ergonomic svg
+ 3d printing tips / pcb creation tips

Section 5:
Hand wiring the board

Section 6:
QMK configuration from scratch
+ understanding the workings of QMK

Section 7:
Flashing your brand new board!
----



SECTION 1:

Let's talk theory. How does a dumb arduino know which of your 40-80 keys you press on your keyboard? You only have like 12 pins on your arduino to read those keys...

Its all due to the magic of multiplexing!

Instead of connecting every single button with a pulldown resistor to the aruino individually (which you could do for lets say a macro pad with 5 keys), we wire all our keys in a matrix.

[tj image_multiplex.png]

In the above wiring diagram i have left out everything apart from the switches, diodes and wires. These 3 components do pretty much all the magic.
As you can see in the above matrix, all the rows and all the columns of the keyboard are wired together in a line. What this allows, is for the arduino to "probe" every single key, one after another.
To understand how this works. Imagine the arduino sends some voltage into the wire A1, and then listens on all of the B wires, if theres voltage. This will ofcoarse only be the case, if a switch is pressed on the B row. This closing of the circuit is detected
by the arduino, and can be handeled by the code running (in our case QMK).

[tj image_1_key_matrix.png]

This scanning is called matrix scanning, and is repeated over and over. Looping over all the columns, and listening for circuits closing on the rows. 

Now why are there diodes in the circuit then? Shouldnt this just work.

Thats a valid question! Diodes arent actually needed. Until you want to press more than one key at a time ;D

To get the so called n-key rollover, we need the diodes to prevent voltage from going, where we dont want it.
If we use the same matrix from above, lets now press 3 keys at the same time (insane).

[tj image_3_key_matrix.png]

As you can see above, something interesting happens. 
When we press 3 keys in an L shape, the voltage shorts out, from one row to another. This looks to our arduino as if 4 keys are pressed. Since voltage ofcourse doesnt just move in one direction when theres an intersection :P
To prevent this voltage movement in the wrong direction, we can use diodes to shape the voltage path.
By placing diodes (usually 1N418 diodes that fire fast) from the rows to column direction, we prevent the voltage from leaking into another row, that isnt currently being scanned, and there we go! Our arduino can scan an INFINITE number of keys being pressed
at the same time (We did it!!)

SECTION 2:
Now that we know the scanning theory, there is very little further electronic knowledge that is required to understand the inner workings of the Keyboard. 
We can now look at a wiring diagram that has ALL components.

[tj image_full_kb_half.png]

As you can see, there is very little difference to our KB matrix. This is simply because there arent many more components. Basically everything is handeled by the Arduino.
Talking arduino... 
Which arduino works for a keyboard? Theres so many of them!
Simply said. Any arduino that has a USB controller on it. 
Theoretically you can just go around and buy any arduino with the ATMEGA 32u4 Microprocessor on it, and it will work flawlessly with qmk!
Personally i recommend the arduino pro Micro as Controller, since its cheap, and has enough cpu power and EEPROM space, to run qmk.

If for some reason you cant get a pro micro (which is rare), there are loads of boards with other MCUs that will work.
Generally you can also run any Controller that has a usb interface.
Theres AVR controllers running LUFA as the usb firmware:
	-ATMEGA 16u2
	-ATMEGA 16u4 (often found in pro micro / sparkfun feather)
	-AT90USB64   (often in teensys)

Theres ARM CPUs with a usb chipset:
	-STM32F0x2
	-STM32F405 (yup thats the chip your flight controller runs on ;D)
	-STM32H733
	-And heaps more.

And for the raspberry lovers:
	-RP2040	   (the pi pico also supports usb!)

When selecting your favourite Microcontroller, all you need to look out for, is that it has more than 16kb of EEPROM for QMK to be save on, a USB controller, and IMPORTANT: A minimum of IO pins of your ammount of rows + columns. 
So lets say you want to build a split kb, that has a 6 x 5 matrix (we will get in to the details in a very short while) you will need a mikrocontroller for each half of the kb that has more than 11 digital pins.

After having decided on your favoutite controller. Its time to buy all the components.

Looking at the wiring diagram there isnt that much to buy!

You will need:
	-Your switches 
	-An equal ammount of 1N418 diodes (1 for each switch) (if you buy other diodes, make sure its fast firing diodes)
	-One microcontroller for every KB half (Or a single one if you build a normie board ;))
	-Wires (i reccommend 30AWG wire wrapping wire, its super nice and easy to strip and already has isolation on it)
	-2 TRRS Jacks (Only for split keyboards.)
	-A case or a 3d printer (Tutorial of designing a 3d printed case in Section 4 :3)
	-Basic soldering equiptment (soldering iron, flux, solder wire)

An example configuration would be:
A 6x4  keyboard, with 3 thumb keys -> 42 Keys 
	-42 Choc switches
	-42 Diodes
	-2 Arduino pro micros
	-2 TRRS jacks
	-Wire


SECTION 3:
Now that you have all components are odered, lets get into the design, while we wait for them to arrive.

Designing an ergonomic keyboard from scratch might sound very intimidating, but theres loads of tools to aid you!

You can either jump straight into cad and let your creativity roam free, but i do not recommend that for beginners.

If its your first time building an ergo board, theres an AMAZING tool called ERGOPAD.

You should open the above link on your phone, or even better tablet.

Ergopad allows you to just place your hand on the screen in a comfy position and start tapping around.

Do this for your writing hand only (for me the right one)

Use your left hand to select the finger that is currently tapping (make sure your wrist does not move during this entire process)

Then start tapping up and down one finger at a time. You will see a layout being generated realtime!

Make sure you only tap your fingers in locations that are comfortable!

After doing roughly 15 taps with each finger, you can click export at the top, and you will get your fully custom keymap!
But wait thats just a long string of text... 

Time for another epic website to turn that text into an image that we can throw into cad.

Well use a website called ergogen, to turn the config we just created into an svg. 
If you are a coding enthusiast or prefer coding svg's manually (psychopath) then you can also just make your keymap here from scratch.

The website allows us to use a scripting language, to generate the footprint position for our keyboard, which we will use in fusion to make the 3d model.

I recommend importing the keymap and exporting the svg image that the website generates right away if you are not comfortable with scripting.
Since ergopad already generated the "perfect" switch layout for you anyway, changes shouldnt be needed.

Simply click on download zip at the right, after pasting your config, and extract the downloaded zip.
The svg file we are interested in, will be located in /Downloads/ergogen/points/demo.svg

Now that we have the svg, its time for CAD!

SECTION 4: 
Who doesnt love some good old engineering.

We shall head into fusion, and start turning this boring svg image into a swag 3d model of our keyboard case, and if we are really deep into the keyboard iceberg, we can even make a pcb for our case in KICAD lateron.

After launching fusion we firstly want to import the svg into our work area, so that we can use it to model our KB.
In the Design workbench, head to the solid tab, and click on insert svg on the right, then upload the demo svg of your board.

[tj image_fusion_insert_svg.png]

This will insert the svg into the workbench and since fusion is a great tool for CAD, auto convert the black and white svg into a sketch that we can model with.
Dont exit the sketch yet tho! We need to model the top face of the keyboard now. This is objectively the hardest step for us creative lacking engineers, so take your time ;D

Since the svg only includes the "holes" for the switches we want to put into the keyboard, we need to model the outer borders, so that the "hole" svg can be turned into a top face, that we can extrude.
Personally, i like using the spline tool in fusion, to create a smooth outline for the board. But feel free to go nuts on your keyboard design, with CAD, there are no limits :3

[tj image_fusion_model_outer_perimeter.png]

We now have the top plate of the keyboard, and in theory, we could just use the  extrude tool, extrude it 5mm and send it off to our 3d printer.
While plopping switches in and soldering everything togehter, we still have a little problem that we can  solve with some more modeling: where do the actual electronics go?

There are 2 roads to go down now. Either we model cutouts and places for the arduino / TRRS jack to go in, or we model with a pcb in mind.
Since this is a beginner guide, and i want you to actually understand how the keyboards work, we are going with a pcb-less handwired board. So lets get back to modeling.

For every component that you want to have in your keyboard, (Arduino, TRRs Jack, Bluetooth modules, Batteries...) you will either need to measure them yourself with calipers, or loop up their datasheet / Dimensions online.

[tj image_arduino_datasheet]

After we know the dimensions, we can create a second sketch, and using the footprint of the component, create "cutouts" that allow glueing or even screwing (more advanced) the component down.

As for how we design the plates and the mounting of components, there are a few design desicions we can take:

Plateless:
	-The simplest form of keyboard:
	     -Cheap to make
	     -not much versatility
	     -doesnt look as good
	     -hard to work on (cable routing / replacing parts)

[tj image_fishwave_kb.png]

Plate:
	-The best form for building / maintenance, consists of 3 Plates
	     -More expensive, since more parts are needed
	     -Harder to design
	     -Way nicer to build in
	     -Looks the best (if designed well)

[tj image_mitchel_kb.png]

Hybrid:
	-A hybrid consisting of 2 plates. a Top plate and a bottom one
	   -Middle ground of cost
	   -Farely easy to design
	   -Still looks good
	   -Does add complexity and cost (heat melt inserts etc)

[tj image_flatsticks_kb.png]

I will go with the most complex, a 3 plate design, since after reading how to create a 3 plate keyboard, you will be able to make every other form too.

Lets get back to fusion. What we now have is a sketch with key holes, and an outer border. Before extruding this top plate, we can already do some preperations for the other plates.
Firstly create a spline offset by using the offset curve tool. We move this offset 2mm or 3mm inwards. This is going to be our keyboard side wall of either the top or middle plate.

[tj image_spline_offset.png]

Then comes a very important addition. Screw holes. We model them now, since doing that later is going to be AIDS.
I recommend going with 6 screwholes. 4 on the actual corners of the kb, and 2 spread on the middle of the keyboard, to prevent the top plate from flexing down when we press the keys.
The board is 3d printed at the end of the day. Adding 2 screws to the middle will provide a backbone for the top plate to rest on.
For our design, i will go with m2 screws. They are tiny enough to fit in between the keys, and they are readily available and cheap, since they come for little money in "laptop repair kits"
So we will run with a hole diameter of 2mm for the screw to go through.
Around every screwhole, we will add 3d printed spacers. So create a 4mm circle around every 2mm circle for the screws. You will see why this is important in a second.

[tj image_screwholes.png]

Heres how our finished top plate sketch should look:

[tj image_finish_top_plate.png]

Now its extrusion time! We extrude different parts of the plate for different lengths. So keep the sketch always visible with the eye icon next to the sketch.

Firstly, we extrude the entire top plate, apart from key holes and screw holes for 2mm or 3mm, depending on how flat you like your board. I prefer mine to be as flat as possible so ill go with 2mm.

[tj image_first_extrude.png]

Then we will extrude the outer wall. The depth depends on how much space for wires we want and what type of switches we want to use.
Choc switches are more shallow and dont need as much space inside the board, Cherry style are a bit more chonky
To save you time measureing:
   -Cherry: 10mm extrusion
   -Choc: 6mm extrusion
I will go with Chocs. So 6mm it is:

[tj image_wall_extrude.png]

Remember how we created the standoff circles? we will use these in a minute,  for now dont extrude them!

Now we already have something that somewhat resembles a keyboard! yay. Lets get on working on the other plates.

The middle plate is easy. It will sit inside the other 2 and will only be used to route cables, hold led's and hold out arduino.
To model it, create a new sketch on the bottom of the top plate wall, and create yet another offset spline on the inside, to allow for clearance.
Now the screw holes come into play, you will want to clone every screwhole and every 4mm spacer circle.
Depending on what hardware you want, now your keyboard might diverge a bit from my design.
If you want led's you need to make mounting holes for them, i will skip this, since rgb is for cringe people :3
We will simply create connections in between the mounting holes, and then copy our arduino and trrs jack footprint, copying the dimensions 1-1 from their datasheet, to glue it in.
Make sure that you leave enough room to route wires, and to NOT interfear with the switches!
We will also model the wire channels, directly on the same plane. This will make extruding them shallower easy.
Depending on how you choose to layout the components, and the shape of your board, your inner plate might look VERY different to mine.
Heres how your inner plate might look. I labeled all the important features:

[tj inner_plate_done.png]

Now to extruding. we want the inner plate to rest inside the top plate, so we will use negative extrude values, to make it extrude "upwards" into the case.
If your extrude tool turns red and switches to cut, you messed something up, make sure your inner plate does not intersect with the top one!
We firstly extrude all the load carrying bits (so not the components, or wire channels) for 3mm
and afterwards the footprints of our components. Depending on the component thickness, we can choose to glue the component onto the mid plate, or have it glued into the plate (basically not extrude at all, leaving a cutout)

[tj image_cutout_vs_onto.png]

When we extrude wire channels, we only extrude 1mm, same for the arduino in my case. I want it to glue down onto the mid plate.
Lastly, the standoffs, extrude them as far as they need to be extruded, to barely touch the top plate, without actually touching it. We wouldnt want fusion to join the 2 components together. Using the mouse and the extrusion arrow makes
this fast. Just dont enter a value.

Heres how it should look:

[tj image_mid_plate_done.png]

Almost done now! 
Off to the bottom plate. This one will be the easiest.
Once again, create a new Component, and place the sketch on the bottom of the kb side wall. This time we will not create an offset spline, but we simply mirror the screw hole location. BUT! We will not use 2mm hole diameter, but 3mm, since thats the diameter of my
heat melt inserts. Make sure you measure your inserts! They might differ in diameter from mine.
Alternatively you can create a 1.5mm hole, and make the screws tap into the plastic. But if you have 5$ to spare, melt inserts are FAR superior, when you plan on upgrading things on the board every now and then.

We dont need to copy the outer standoff circles, since we obviously dont want random standoffs, sticking out the bottom of the KB :3

Now we extrude once again (Notice a pattern in fusion? >.<)
This time a positive extrusion value, since we want the bottom plate to be beneath the outer wall.

This is how a crossection should look after extruding:

[tj image_cross_done.png]

Notice a problem? the keyboard is entirely closed on all sides, we aint getting any data out of that thing...
The last thing we need to do, is to create holes for cables to pass through.

Select the top plate as the active component.
We can do this by creating a sketch, where the connectors of the arduino/trrs would be(create the sketch on the middle plate),
and just extruding them out. Fusion will automatically switch to cutting mode, since we are intersecting with the top plate 

[tj image_connector_cutout.png]

Now we are done! If you want you can add little things like text or patterns, to the keyboard or clean everything up with chamfers or fillets, but this is left up to you, depending on how you want the board to look
Heres mine, after some cleanup:

[tj image_mitchel_kb_done.png]

Now its all up to you, to print the parts out in your favourite material / Color and we can go straight to soldering! :3

SECTION 5:
Soldering. If you have never done it, this is a great project to learn soldering. Although who the hell has a 3d printer, but never soldered before xd
Anyway, remember the key matrix diagram we looked at earlier? We now make that become reality.

Many guides on this tell you to get enamel wire, and scrape the enamel off at the parts that touch the keys, or to just grab normal wire, and unisolate the ends.
I did that once and spent an entire day just soldering... Dont do that LOL
I have "developed" a better way to more quickly solder the board, that doesnt compromize on anything and just saves you time.

Simply use 30AWG unisolated wire instead of cable. You can directly solder to it, and after soldering all rows, we put kepton tape over the exposed traces, to prevent shorts.
Its fast, easy, and has not failed me in the past 5 years.

Lets not rush ahead tho.

To begin, preheat your soldering iron, and plop all switches into the 3d printed top plate.
When they are installed, we will tin the legs of the switches, to make soldering wires to them easier, and prevent overheating the switches.
Simply take a SMALL ammount of solder, and make sure it flows on the legs well.

I can recommend 280C on the soldering iron, and lead free, rosin core 1mm diameter solder wire for this.

[tj image_top_half_switches.png]
